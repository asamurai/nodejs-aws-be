service:
  name: game-store-service

custom:
  webpack:
    webpackConfig: ./webpack.config.js
    includeModules: true
  documentation:
    api:
      info:
        version: '1.0.0'
        title: Product management API
        description: Game store product management API
      tags:
        - name: Product
          description: Product Management
    models:
      - name: MessageResponse
        contentType: "application/json"
        schema:
          type: object
          properties:
            message:
              type: string
      - name: CreateProductRequest
        contentType: "application/json"
        schema:
          required:
            - title
            - description
            - price
            - count
          properties:
            title:
              type: string
            description:
              type: string
            price:
              type: integer
              minimum: 0
            count:
              type: integer
              minimum: 0
            studio:
              type: string
            genre:
              type: string
            release_date:
              type: string
            poster:
              type: string
      - name: CreateProductResponse
        contentType: "application/json"
        schema:
          type: object
          properties:
            result:
              type: string
      - name: 400JsonResponse
        contentType: "application/json"
        schema:
          type: object
          properties:
            message:
              type: string
            statusCode:
              type: number
    commonModelSchemaFragments:
      MethodResponse400Json:
        statusCode: '400'
        responseModels:
          "application/json": 400JsonResponse

# Add the serverless-webpack plugin
plugins:
  - serverless-webpack
  - serverless-dotenv-plugin
  - serverless-reqvalidator-plugin
  - serverless-aws-documentation

provider:
  name: aws
  runtime: nodejs12.x
  profile: aws-test
  region: eu-west-1
  stage: dev
  iamRoleStatements:
    - Effect: "Allow"
      Action: "sqs:*"
      Resource:
        - Fn::GetAtt: [ SQSQueue, Arn ]
    - Effect: "Allow"
      Action: "sns:*"
      Resource:
        - Ref: SNSTopic
  apiGateway:
    minimumCompressionSize: 1024 # Enable gzip compression for responses > 1 KB
  environment:
    AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
    TOPIC_ARN:
      Ref: SNSTopic
    PG_HOST: ${env:PG_HOST}
    PG_PORT: ${env:PG_PORT}
    PG_DATABASE: ${env:PG_DATABASE}
    PG_USERNAME: ${env:PG_USERNAME}
    PG_PASSWORD: ${env:PG_PASSWORD}

functions:
  getProductsList:
    handler: handler.getProductsList
    events:
      - http:
          method: get
          path: products
          cors:
            origins:
              - '*'
            headers:
              - '*'
  getProductsById:
    handler: handler.getProductsById
    events:
      - http:
          method: get
          path: products/{id}
          request:
            parameters:
              paths:
                id: true
          cors:
            origins:
              - '*'
            headers:
              - '*'
  createProduct:
    handler: handler.createProduct
    events:
      - http:
          documentation:
            summary: "Create product"
            description: "Create new product"
            tags:
              - Product
            requestModels:
              "application/json": CreateProductRequest
          method: post
          path: products
          cors:
            origins:
              - '*'
            headers:
              - '*'
          reqValidatorName: onlyBody
          methodResponses:
            - statusCode: '200'
              responseModels:
                "application/json": CreateProductResponse
            - ${self:custom.commonModelSchemaFragments.MethodResponse400Json}
  catalogBatchProcess:
    handler: handler.catalogBatchProcess
    events:
      - sqs:
          batchSize: 5
          arn:
            Fn::GetAtt:
              - SQSQueue
              - Arn

resources:
  Outputs:
    SQSQueueUrl:
      Value:
        Ref: SQSQueue
    SQSQueueArn:
      Value:
        Fn::GetAtt:
         - SQSQueue
         - Arn
  Resources:
    onlyBody:
      Type: "AWS::ApiGateway::RequestValidator"
      Properties:
        Name: 'only-body'
        RestApiId:
          Ref: ApiGatewayRestApi
        ValidateRequestBody: true
        ValidateRequestParameters: false
    SQSQueue:
      Type: "AWS::SQS::Queue"
      Properties:
        QueueName: ${env:SQS_NAME}
    SNSTopic:
      Type: "AWS::SNS::Topic"
      Properties:
        TopicName: ${env:TOPIC_NAME}
    SNSSubscriptionSuccess:
      Type: "AWS::SNS::Subscription"
      Properties:
        Endpoint: ${env:SUCCESS_EMAIL}
        Protocol: email
        TopicArn:
          Ref: SNSTopic
        FilterPolicy:
          status:
            - SUCCESS
    SNSSubscriptionFailure:
      Type: "AWS::SNS::Subscription"
      Properties:
        Endpoint: ${env:FAILURE_EMAIL}
        Protocol: email
        TopicArn:
          Ref: SNSTopic
        FilterPolicy:
          status:
            - FAILURE
